{"version":3,"sources":["Data/Algorithms.js","Components/Context.js","Components/Dropdown.js","Components/Customize.js","Components/Navbar.js","Components/Edge.js","Components/DrawEdges.js","Components/Grid.js","Components/App.js","index.js"],"names":["algorithms","AppContext","React","createContext","nodes","Array","number_of_nodes","join","split","map","parseFloat","AppProvider","children","useState","vertices","setVertices","currentVertex","setCurrentVertex","verticesAdded","setVerticesAdded","edgesAdded","setEdgesAdded","x1","x2","y1","y2","node1","node2","edge","setEdge","edges","setEdges","adjList","setAjdList","currentAlgo","setCurrentAlgo","startNode","setStartNode","nodesDist","setNodesDist","refresh","weight","item","Provider","value","size","clearAll","makeNode","index","vertex","idx","updatePoints","width","height","console","log","edgeWeight","Math","floor","random","changeAlgo","algo","startVisualisation","queue","newVertices","JSON","parse","stringify","iteration","length","len","j","shift","i","push","doBFS","stack","pop","doDFS","pq","newNodesDist","dist","filter","node","doDIJKTRAS","useGlobalContext","useContext","Dropdown","rect","show","style","top","y","left","x","className","onClick","Customize","customize","setCustomize","class","Navbar","theme","setTheme","dropdown","setDropdown","selectAlgoRef","useRef","useEffect","document","documentElement","newTheme","current","getBoundingClientRect","ref","Edge","angle","atan","PI","sqrt","midX","midY","transform","DrawEdges","Grid","activeNode","myNode","transition","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.99367d8c.chunk.js","sourcesContent":["export const algorithms = [\"bfs\", \"dfs\", \"dijktras\"];\r\n","import React, { useState, useContext } from \"react\";\r\nconst AppContext = React.createContext();\r\n\r\n// making initial nodes array: all entries are 0\r\nconst size = 32;\r\nconst cols = 40;\r\nconst rows = 17;\r\nconst number_of_nodes = rows * cols;\r\nlet nodes = new Array(number_of_nodes + 1).join(\"0\").split(\"\").map(parseFloat);\r\n\r\nexport const AppProvider = ({ children }) => {\r\n  const [vertices, setVertices] = useState(nodes); //keeps track of which nodes are vertices and which are not\r\n  const [currentVertex, setCurrentVertex] = useState(null); //current vertex clicked on board\r\n  const [verticesAdded, setVerticesAdded] = useState(0); //number of nodes added\r\n  const [edgesAdded, setEdgesAdded] = useState(0); //number of edges added\r\n  const [edge, setEdge] = useState({\r\n    //properties of the latest edge: from{x1,y1, node1} to{x2,y2,node2}\r\n    x1: -1,\r\n    x2: -1,\r\n    y1: -1,\r\n    y2: -1,\r\n    node1: -1,\r\n    node2: -1,\r\n  });\r\n  const [edges, setEdges] = useState([]); //properties of all edges, array of edge(as defined above)\r\n  const [adjList, setAjdList] = useState([]); //adjacency list of edges, multi-dimensional array of size: number of edges x 2\r\n  const [currentAlgo, setCurrentAlgo] = useState(\"\"); //current selected algo to run\r\n  const [startNode, setStartNode] = useState(-1); //node at which the algorithm starts\r\n  const [nodesDist, setNodesDist] = useState(nodes.map((nodes) => 10000));\r\n  //function for clearing the board\r\n  const clearAll = () => {\r\n    setVertices(nodes);\r\n    setEdges([]);\r\n    setEdge({\r\n      x1: -1,\r\n      x2: -1,\r\n      y1: -1,\r\n      y2: -1,\r\n      node1: -1,\r\n      node2: -1,\r\n      weight: -1,\r\n    });\r\n    setCurrentVertex(null);\r\n    setEdgesAdded(0);\r\n    setVerticesAdded(0);\r\n    setStartNode(-1);\r\n    setCurrentAlgo(\"\");\r\n    setAjdList([]);\r\n    setNodesDist(nodes.map((nodes) => 10000));\r\n  };\r\n\r\n  //function for clearing the progress of the algorithm\r\n  const refresh = () => {\r\n    setEdge({\r\n      x1: -1,\r\n      x2: -1,\r\n      y1: -1,\r\n      y2: -1,\r\n      node1: -1,\r\n      node2: -1,\r\n      weight: -1,\r\n    });\r\n    setCurrentVertex(null);\r\n    setCurrentAlgo(\"\");\r\n    setVertices(\r\n      vertices.map((item) => {\r\n        if (item >= 1) return 1;\r\n        return 0;\r\n      })\r\n    );\r\n    setNodesDist(nodes.map((nodes) => 10000));\r\n  };\r\n\r\n  const updatePoints = (width, height) => {\r\n    //ignore if currently doing graph traversal\r\n    if (currentAlgo !== \"\") return;\r\n\r\n    console.log(width, height);\r\n\r\n    //maybe this vertex is part of an edge\r\n    if (edge.x1 !== -1) {\r\n      //found an edge\r\n      const edgeWeight = Math.floor(Math.random() * 10 + 1);\r\n      setAjdList([...adjList, [edge.node1, currentVertex, edgeWeight]]);\r\n      setEdges([\r\n        ...edges,\r\n        {\r\n          ...edge,\r\n          x2: width,\r\n          y2: height,\r\n          node2: currentVertex,\r\n          weight: edgeWeight,\r\n        },\r\n      ]);\r\n      setEdge({\r\n        x1: -1,\r\n        x2: -1,\r\n        y1: -1,\r\n        y2: -1,\r\n        node1: -1,\r\n        node2: -1,\r\n        weight: -1,\r\n      });\r\n      setEdgesAdded(edgesAdded + 1);\r\n      setCurrentVertex(null);\r\n    } else {\r\n      //maybe this is the first node of an edge\r\n      setEdge({ ...edge, x1: width, y1: height, node1: currentVertex });\r\n    }\r\n  };\r\n\r\n  //handles the event when we click on a cell\r\n  const makeNode = (index) => {\r\n    //if an algorithm is running ignore clicks\r\n    if (currentAlgo !== \"\") {\r\n      return;\r\n    }\r\n    //check if user clicked on a vertex twice\r\n    if (index === edge.node1) {\r\n      //deactivate edge making process\r\n      setCurrentVertex(null);\r\n      setEdge({ x1: -1, x2: -1, y1: -1, y2: -1, node1: -1, node2: -1 });\r\n      return;\r\n    }\r\n    //set this node as the current node\r\n\r\n    //if this node was already an vertex\r\n    if (vertices[index] === 1) {\r\n      setCurrentVertex(index);\r\n      return;\r\n    }\r\n\r\n    //this node is a new vertex\r\n    setCurrentVertex(null);\r\n    setVerticesAdded(verticesAdded + 1);\r\n    setStartNode(index); //this makes us start the algo from the latest added vertex\r\n    setEdge({\r\n      x1: -1,\r\n      x2: -1,\r\n      y1: -1,\r\n      y2: -1,\r\n      node1: -1,\r\n      node2: -1,\r\n      weight: -1,\r\n    });\r\n    setVertices(\r\n      vertices.map((vertex, idx) => {\r\n        if (index === idx) {\r\n          return 1;\r\n        }\r\n        return vertex;\r\n      })\r\n    );\r\n  };\r\n\r\n  //changes algorithm\r\n  const changeAlgo = (algo) => {\r\n    refresh();\r\n    if (algo === currentAlgo) setCurrentAlgo(\"\");\r\n    else setCurrentAlgo(algo);\r\n  };\r\n\r\n  const doBFS = () => {\r\n    let queue = [startNode];\r\n    let newVertices = JSON.parse(JSON.stringify(vertices));\r\n\r\n    let iteration = 2;\r\n    while (queue.length !== 0) {\r\n      const len = queue.length;\r\n      let j = 0;\r\n      while (j < len) {\r\n        const index = queue[0];\r\n        queue.shift();\r\n        if (newVertices[index] > 1) {\r\n          j++;\r\n          continue;\r\n        }\r\n        newVertices[index] = iteration;\r\n\r\n        for (let i = 0; i < adjList.length; i++) {\r\n          if (adjList[i][0] === index && newVertices[adjList[i][1]] === 1) {\r\n            queue.push(adjList[i][1]);\r\n          }\r\n          if (adjList[i][1] === index && newVertices[adjList[i][0]] === 1) {\r\n            queue.push(adjList[i][0]);\r\n          }\r\n        }\r\n        j++;\r\n      }\r\n      iteration++;\r\n    }\r\n\r\n    setVertices(newVertices);\r\n  };\r\n\r\n  const doDFS = () => {\r\n    let stack = [startNode];\r\n    let newVertices = JSON.parse(JSON.stringify(vertices));\r\n\r\n    let iteration = 2;\r\n    while (stack.length !== 0) {\r\n      const index = stack[stack.length - 1];\r\n      stack.pop();\r\n      if (newVertices[index] > 1) {\r\n        continue;\r\n      }\r\n      newVertices[index] = iteration;\r\n\r\n      for (let i = 0; i < adjList.length; i++) {\r\n        if (adjList[i][0] === index && newVertices[adjList[i][1]] === 1) {\r\n          stack.push(adjList[i][1]);\r\n        }\r\n        if (adjList[i][1] === index && newVertices[adjList[i][0]] === 1) {\r\n          stack.push(adjList[i][0]);\r\n        }\r\n      }\r\n      iteration++;\r\n    }\r\n\r\n    setVertices(newVertices);\r\n  };\r\n\r\n  const doDIJKTRAS = () => {\r\n    let pq = [[startNode, 0]];\r\n    let newNodesDist = JSON.parse(JSON.stringify(nodesDist));\r\n    newNodesDist[startNode] = 0;\r\n\r\n    while (pq.length !== 0) {\r\n      //go through the queue and find the element with the lowest dist from startNode\r\n      let dist = pq[0][1];\r\n      let index = 0;\r\n      for (let i = 1; i < pq.length; i++) {\r\n        if (pq[i][1] < dist) {\r\n          dist = pq[i][1];\r\n          index = i;\r\n        }\r\n      }\r\n      const vertex = pq[index][0];\r\n      pq = pq.filter((node) => node[0] !== vertex);\r\n\r\n      if (newNodesDist[vertex] < dist) continue; //check if there is already a better version of the element in queue\r\n      for (let i = 0; i < adjList.length; i++) {\r\n        if (\r\n          adjList[i][0] === vertex &&\r\n          newNodesDist[vertex] + adjList[i][2] < newNodesDist[adjList[i][1]]\r\n        ) {\r\n          newNodesDist[adjList[i][1]] = newNodesDist[vertex] + adjList[i][2];\r\n          pq.push([adjList[i][1], newNodesDist[vertex] + adjList[i][2]]);\r\n        }\r\n        if (\r\n          adjList[i][1] === vertex &&\r\n          newNodesDist[vertex] + adjList[i][2] < newNodesDist[adjList[i][0]]\r\n        ) {\r\n          newNodesDist[adjList[i][0]] = newNodesDist[vertex] + adjList[i][2];\r\n          pq.push([adjList[i][0], newNodesDist[vertex] + adjList[i][2]]);\r\n        }\r\n      }\r\n    }\r\n    setNodesDist(newNodesDist);\r\n    console.log(\"dijktras ended\");\r\n  };\r\n  const startVisualisation = () => {\r\n    if (currentAlgo === \"\") return;\r\n    if (currentAlgo === \"bfs\") doBFS();\r\n    if (currentAlgo === \"dfs\") doDFS();\r\n    if (currentAlgo === \"dijktras\") doDIJKTRAS();\r\n  };\r\n  return (\r\n    <AppContext.Provider\r\n      value={{\r\n        vertices,\r\n        currentVertex,\r\n        size,\r\n        verticesAdded,\r\n        edgesAdded,\r\n        edges,\r\n        currentAlgo,\r\n        startNode,\r\n        nodesDist,\r\n        clearAll,\r\n        makeNode,\r\n        updatePoints,\r\n        changeAlgo,\r\n        refresh,\r\n        startVisualisation,\r\n      }}\r\n    >\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useGlobalContext = () => useContext(AppContext);\r\n","import React from \"react\";\r\nimport { algorithms } from \"../Data/Algorithms\";\r\nimport { useGlobalContext } from \"./Context\";\r\n\r\nfunction Dropdown({ rect, show }) {\r\n  const { currentAlgo, changeAlgo } = useGlobalContext();\r\n  console.log(rect);\r\n  const style = {\r\n    top: `${rect.y + rect.height}px`,\r\n    left: `${rect.x}px`,\r\n    width: `${rect.width}px`,\r\n  };\r\n  return (\r\n    <div className={`dropdown ${show ? \"dropdown-show\" : \"\"}`} style={style}>\r\n      {algorithms.map((algo, index) => {\r\n        return (\r\n          <li\r\n            className={`${\r\n              currentAlgo !== \"\"\r\n                ? algo === currentAlgo\r\n                  ? \"active-algo\"\r\n                  : \"\"\r\n                : \"\"\r\n            }`}\r\n            key={index}\r\n            onClick={() => changeAlgo(algo)}\r\n          >\r\n            {algo}\r\n          </li>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dropdown;\r\n","import React, { useState } from \"react\";\r\n\r\nfunction Customize() {\r\n  const [customize, setCustomize] = useState(false);\r\n\r\n  return (\r\n    <div>\r\n      <i\r\n        class=\"fas fa-chevron-circle-down fa-2x \"\r\n        onClick={() => setCustomize(!customize)}\r\n      ></i>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Customize;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport Dropdown from \"./Dropdown\";\r\nimport Customize from \"./Customize\";\r\nimport { useGlobalContext } from \"./Context\";\r\n\r\nfunction Navbar() {\r\n  const {\r\n    clearAll,\r\n    refresh,\r\n    startVisualisation,\r\n    currentAlgo,\r\n  } = useGlobalContext();\r\n\r\n  const [theme, setTheme] = useState(\"light-theme\");\r\n  const [dropdown, setDropdown] = useState(false);\r\n\r\n  const selectAlgoRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    document.documentElement.className = theme;\r\n  }, [theme]);\r\n\r\n  useEffect(() => {\r\n    setDropdown(false);\r\n  }, [currentAlgo]);\r\n\r\n  const toggleTheme = () => {\r\n    let newTheme = \"light-theme\";\r\n    if (theme === newTheme) {\r\n      newTheme = \"dark-theme\";\r\n    }\r\n    setTheme(newTheme);\r\n  };\r\n\r\n  return (\r\n    <div className=\"navbar\">\r\n      <div className=\"themeToggle\">\r\n        <i className=\"fas fa-adjust fa-2x\" onClick={toggleTheme}></i>\r\n      </div>\r\n      <div className=\"title\">algo-visualiser </div>\r\n      {dropdown && (\r\n        <Dropdown\r\n          rect={selectAlgoRef.current.getBoundingClientRect()}\r\n          show={dropdown}\r\n        />\r\n      )}\r\n      <ul>\r\n        <li\r\n          onClick={() => setDropdown(!dropdown)}\r\n          ref={selectAlgoRef}\r\n          className={`${currentAlgo !== \"\" ? \"active-algo\" : \"\"}`}\r\n        >\r\n          {currentAlgo || \"Select ALgo\"}\r\n          <i class=\"fas fa-caret-down fa-2x\"></i>\r\n        </li>\r\n        <li onClick={startVisualisation}>begin</li>\r\n        <li onClick={refresh}>refresh</li>\r\n        <li onClick={clearAll}>delete</li>\r\n      </ul>\r\n      <Customize />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport { useGlobalContext } from \"./Context\";\r\n\r\nfunction Edge({ edge }) {\r\n  const { x1, x2, y1, y2, weight } = edge;\r\n  const { size, currentAlgo } = useGlobalContext();\r\n  if (x1 === -1) {\r\n    return <></>;\r\n  }\r\n  const angle = (Math.atan((y2 - y1) / (x2 - x1)) * 180) / Math.PI;\r\n  const dist = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\r\n  const midX = (x1 + x2) / 2;\r\n  const midY = (y1 + y2) / 2;\r\n  const style = {\r\n    width: `${dist}px`,\r\n    top: `${midY + size / 2}px`,\r\n    left: `${midX - dist / 2 + size / 2}px`,\r\n    transform: `rotate(${angle}deg)`,\r\n  };\r\n\r\n  return (\r\n    <div className=\"edge\" style={style}>\r\n      {currentAlgo === \"dijktras\" && weight}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Edge;\r\n","import React from \"react\";\r\nimport Edge from \"./Edge\";\r\nimport { useGlobalContext } from \"./Context\";\r\n\r\nfunction DrawEdges() {\r\n  const { edges } = useGlobalContext();\r\n  return (\r\n    <div>\r\n      {edges.map((edge, index) => {\r\n        return <Edge key={index} edge={edge} />;\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DrawEdges;\r\n","import React, { useRef, useEffect } from \"react\";\r\nimport \"../Styles/index.css\";\r\nimport DrawEdges from \"./DrawEdges\";\r\nimport { useGlobalContext } from \"./Context\";\r\n\r\nfunction Grid() {\r\n  const {\r\n    vertices,\r\n    makeNode,\r\n    currentVertex,\r\n    updatePoints,\r\n    nodesDist,\r\n    currentAlgo,\r\n  } = useGlobalContext();\r\n\r\n  const activeNode = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (activeNode.current !== null && currentVertex !== null) {\r\n      const myNode = activeNode.current.getBoundingClientRect();\r\n      updatePoints(myNode.x, myNode.y);\r\n    }\r\n  }, [currentVertex]);\r\n\r\n  return (\r\n    <div className=\"grid-container\">\r\n      {vertices.map((node, index) => {\r\n        const className = `${\r\n          node >= 1\r\n            ? node > 1 || nodesDist[index] !== 10000\r\n              ? \"visited\"\r\n              : \"vertex\"\r\n            : \"node\"\r\n        } ${currentVertex === index && \"active\"}`;\r\n        const style = {\r\n          transition: ` background 0s linear ${\r\n            node > 1 ? `${node - 1}s` : \"0s\"\r\n          }, color 0s`,\r\n        };\r\n        return (\r\n          <div\r\n            className={className}\r\n            style={style}\r\n            key={index}\r\n            onClick={() => makeNode(index)}\r\n            ref={currentVertex === index ? activeNode : null}\r\n          >\r\n            {currentAlgo === \"dijktras\" && nodesDist[index] !== 10000\r\n              ? nodesDist[index]\r\n              : \"\"}{\" \"}\r\n            {node > 1 ? node - 1 : \"\"}\r\n          </div>\r\n        );\r\n      })}\r\n      <DrawEdges />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Grid;\r\n","import React from \"react\";\r\n\r\nimport Navbar from \"./Navbar\";\r\nimport Grid from \"./Grid\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"appContainer\">\r\n      <Navbar />\r\n      <Grid />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"./Styles/index.css\";\r\nimport App from \"./Components/App\";\r\nimport { AppProvider } from \"./Components/Context\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <AppProvider>\r\n      <App />\r\n    </AppProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}